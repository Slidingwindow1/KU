var counter = new int[26];
for (int i = 0; i < S.length(); i++){
counter[S.charAt(i)- 'a']++;
}
var numRemove = 0;
for (int i = 0; i < counter.length; i++)
{
if (counter[i] % 2 == 1){
numRemove++;
}
}

return numRemove;
var counter = new int[26];
for (int i = 0; i < S.Length; i++)
    counter[S[i] - 'a']++;

var numRemove = 0;
for (int i = 0; i < counter.Length; i++)
{
    if (counter[i] % 2 == 1)
        numRemove++;
}

return numRemove;


should return the minimum number of deletions to obtain a word with even frequency of each character.

Constraints:
Input within the a-z charset.

Test cases:

f("acbcbba") => 1, delete 1 'b'
f("axxaxa") => 2, delete 1 'a', 1 'x'
f("kkkkkk") => 0, nop
My solution:

var counter = new int[26];
for (int i = 0; i < S.Length; i++)
    counter[S[i] - 'a']++;

var numRemove = 0;
for (int i = 0; i < counter.Length; i++)
{
    if (counter[i] % 2 == 1)
        numRemove++;
}

return numRemove;

