
{
    static void Main() {
        int x = 10;
        int y = 25;
        int z = x + y;
        string[] S= new string[]{"kkkkkk","axxaxa", "acbcbba"}
        ;
var counter = new int[26];
 string s= S[1];
for (int i = 0; i < s.Length; i++)
    counter[s[i] - 'a']++;

var numRemove = 0;
for (int i = 0; i < counter.Length; i++)
{
    if (counter[i] % 2 == 1)
        numRemove++;
}

Console.WriteLine(numRemove);

  


should return the minimum number of deletions to obtain a word with even frequency of each character.

Constraints:
Input within the a-z charset.

Test cases:

f("acbcbba") => 1, delete 1 'b'
f("axxaxa") => 2, delete 1 'a', 1 'x'
f("kkkkkk") => 0, nop
My solution:

var counter = new int[26];
for (int i = 0; i < S.Length; i++)
    counter[S[i] - 'a']++;

var numRemove = 0;
for (int i = 0; i < counter.Length; i++)
{
    if (counter[i] % 2 == 1)
        numRemove++;
}

return numRemove;

