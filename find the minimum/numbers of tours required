// C# program to find the minimum 
// numbers of tours required

using System;
 

class GFG
{
 

static int getMin(int N, int [] A, int k)
{

    // Iterating through each possible 

    // value of minimum Items

    int maximum = 0,tours = 0;

     

    for(int i = 0; i < N; i++)

        maximum = Math.Max(maximum, A[i]);

         

    for(int i = 1; i < maximum + 1; i++)

    {

        tours = 0;

        for(int j = 0; j < N; j++)

        {

            if(A[j] % i == 0)// perfecctly Divisible 

        {

            tours += A[j] /i;

        }

        else

        {

                // Not Perfectly Divisible means required

                // tours are Floor Division + 1

                tours += (int)Math.Floor(A[j] / (i * 1.0)) + 1;

        }

    }

        if(tours <= k)

        {

            // Return First Feasible Value found,

            // since it is also the minimum

            return i;

        }

    }

     

    return -1;
}
 
// Driver code

public static void Main() 
{

    int []a = {1, 4, 9, 16, 25, 36, 49, 64, 81, 100};
 

    int n = 10;
 

    int k = 50;
 

    if(getMin(n, a, k) == -1)

        Console.WriteLine("Not Possible");

    else

        Console.WriteLine(getMin(n, a, k));
}
}
 
// This code is contributed by 
// Mohit kumar
