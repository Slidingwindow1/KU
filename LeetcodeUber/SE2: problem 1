UseYou want to schedule a certain number of trips with a collection of several cabs.

Given an integer n representing a desired number of trips, and an array cabTravelTime representing your cabs and how long it takes each cab (at that index of the array) to make a trip, return the minimum time required to make n trips.

Assume that cabs can run simultaneously and there is no waiting period between trips. There may be multiple cabs with the same time cost.*

Examples
If n=3 and cabTravelTime=[1,2], then the answer is 2. This is because the first cab (index 0, cost 1) can make 2 trips costing a total of 2 time units, and the second cab can make a single trip costing 2 at the same time.

n=10
cabTravelTime=[1,3,5,7,8]

* 7 trips with cab 0 (cost 1)
* 2 trips with cab 1 (cost 3)
* 1 trip with cab 2 (cost 5)
So, answer is 7 (there could be other combinations)

n=3
cabTravelTime=[3,4,8]

* 2 trips with cab 0 (cost 6)
* 1 trip with cab 1 (cost 4)
Time = 6

using System;

using System;



class Program
{
    static bool pos(int val,int[] nums,int n){  //greedy checker function
    int len=nums.Length;
    int curr=0;
    
    for(int i=0;i<len;i++){
        Console.WriteLine($"{val} {curr}");
        curr+=val/nums[i] ;
        if(curr>=n)
            return true;
    }
    return false;
}

static int solve(int[] nums,int n){
    int cnt=0;
    foreach(int v in nums)
    {
        cnt+=v;
    }
    int l=0,r=cnt;//Int32.MaxValue;
    int ans=cnt;//Int32.MaxValue;
    while(l<r){
        int mid=l+(r-l)/2;
        if(pos(mid ,nums, n)){
            ans=Math.Min(ans,mid);
            r=mid;
        }
        else
            l=mid+1;
    }
    return ans;
    
}
static void Main(){
    int[] vec={3,4,8};
    int n=3;
    Console.WriteLine(solve(vec,n));   
}
}
