Given a list of ricebags, 
choose a set of perfect ricebags
 with maximum size. 
A perfect ricebag set obeys the 
following conditions:
	1. Atleast size of 2 
	2. When sorted, 
ricebags[i]*ricebags[i]=
ricebags[i+1] , 
for all 0<=i<=N(length of ricebags)

Example: ricebags=[3, 4, 2, 9, 16] 
Possible sets are:
	1. [3,9]  -> size=2
	2. [4,2]  -> size=2 
	3. [4,16] -> size=2
	3. [4,2,16]  -> size=3

Answer = 3 (max-set-size) 

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        
        n = len(nums)
        gp={}
        max_l=0
        
		# Create adjacency list
        for i in nums:
            gp[i]=[]
        
        for i,e in enumerate(nums):
            if e-1 in gp:
                gp[e].append(e-1)
            if e+1 in gp:
                gp[e].append(e+1)                
        
        visited = {}
        def dfs(e):            
            if e in visited:
                return 0
            visited[e]=1
            l = 1
            for i in gp[e]:
                l+=dfs(i)
            
            return l
        
        for k in gp.keys():
            max_l = max(max_l,dfs(k))
        
        return max_l
