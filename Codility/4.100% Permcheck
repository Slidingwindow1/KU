A permutation is a sequence containing each element from 1 to N once, and only once.

For example, array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
    A[3] = 2
is a permutation, but array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
is not a permutation, because value 2 is missing.

using System;
using System.Collections.Generic;

class Solution {
	public int solution(int[] A) {
		uint
			expected = (uint)((A.Length + ((A.Length + 1) % 2)) * Math.Ceiling(A.Length / 2.0)),
			sum = 0;
		HashSet<int> digits = new HashSet<int>(A);
		if (digits.Count != A.Length)
			return 0;
		for (int i = -1; ++i < A.Length; sum += (uint)A[i])
			;
		return sum == expected ? 1 : 0;
	}
}
 
100% XOR each value
int xorsum = 0;
        for (int i = 0; i < A.Length; i++)
        {
            xorsum = (i + 1) ^ A[i] ^ xorsum;

        }
        if (xorsum > 0)
            return 0;
        return 1;
