K %= A.Length;
        int[] res = A.ToArray();
        for (int i = 0; i < A.Length; i++) 
            A[i] = res[i - K >= 0 ? i - K: i - K + res.Length];
    
return A;
;;;;;;;;;;;;;//Yes



int main()
{
 

    // Initialize the array

    int A[] = { 1, 2, 3, 4, 5 };
 

    // Find the size of the array

    int N = sizeof(A) / sizeof(Array[0]);
 

    // Initialize K

    int K = 4;
 

    // Call the function and

    // print the answer

    RightRotate(A, N, K);
 

    return



    int arr[] = { 1, 3, 5, 7, 9, 11 };

    int n = sizeof(arr) / sizeof(arr[0]);

    int k = 3; //No. of rotations

    k = k % n;

    int i, j;

    // Reverse last k numbers

    for (i = n - k, j = n - 1; i < j; i++, j--) {

        int temp = arr[i];

        arr[i] = arr[j];

        arr[j] = temp;

    }

    // Reverse the first n-k terms

    for (i = 0, j = n - k - 1; i < j; i++, j--) {

        int temp = arr[i];

        arr[i] = arr[j];

        arr[j] = temp;

    }

    // Reverse the entire array

    for (i = 0, j = n - 1; i < j; i++, j--) {

        int temp = arr[i];

        arr[i] = arr[j];

        arr[j] = temp;

    }
 

    // Print the rotated array

    for (int i = 0; i < n; i++) {

        cout << arr[i] << " ";

    }
 

    return
