using System.Collections;
using System.Collections.Generic;

class Solution{

	public static void parenting(TreeNode root, Dictionary<TreeNode, TreeNode> parent){
        Queue<TreeNode> q= new Queue<TreeNode>();
        q.Push(root);
        while(q.Count!=0){
            int n = q.Count;
            for(int i=0;i<n;i++){
                var it = q.Peek();
                q.Dequeue();
                if(it.left){
                    parent[it.left] = it;
                    q.Enqueue(it.left);
                }
                if(it.right){
                    parent[it.right] = it;
                    q.Enqueue(it.right);
                }
            }
        }
    }
	
	public static int timeToBurnTree(TreeNode root, TreeNode target) {
        Dictionary<TreeNode, TreeNode> parent;
        parenting(root,parent);
        
        Dictionary<TreeNode, bool> visited;
        Queue<TreeNode> q= new Queue<TreeNode>();
        q.Enqueue(target);
        visited[target] = true;
        int time = 0;
        while(!q.empty()){
            int n = q.Count;
            for(int i=0;i<n;i++){
                auto it = q.front();
                q.pop();
                if(it->left && !visited[it->left]){
                    q.Enqueue(it.left);
                    visited[it.left] = true;
                }
                if(it.right && !visited[it.right]){
                    q.Enqueue(it.right);
                    visited[it.right] = true;
                }
                if(parent[it] && !visited[parent[it]]){
                    q.Enqueue(parent[it]);
                    visited[parent[it]] = true;
                }
            }
            time++;
        }
		return time;
	}
};
