// C# program for the above approach

using System;

class GFG 
{

     

  // DFS Traversal to find the count of

  // island surrounded by water

  static void dfs(int[,] matrix, bool[,] visited,

                  int x, int y, int n, int m,

                  bool hasCornerCell)

  {
 

    // If the land is already visited

    // or there is no land or the

    // coordinates gone out of matrix

    // break function as there

    // will be no islands

    if (x < 0 || y < 0 || x >= n || y >= m || 

        visited[x, y] == true || matrix[x, y] == 0)

      return;
 

    if (x == 0 || y == 0 || 

        x == n - 1 || y == m - 1)

    {

      if (matrix[x, y] == 1)

        hasCornerCell = true;

    }
 

    // Mark land as visited

    visited[x, y] = true;
 

    // Traverse to all adjacent elements

    dfs(matrix, visited, x + 1, y, n, m,

        hasCornerCell);

    dfs(matrix, visited, x, y + 1, n, m,

        hasCornerCell);

    dfs(matrix, visited, x - 1, y, n, m, 

        hasCornerCell);

    dfs(matrix, visited, x, y - 1, n, m, 

        hasCornerCell);

  }
 

  // Function that counts the closed island

  static int countClosedIsland(int[,] matrix, int n,

                               int m)

  {
 

    // Create boolean 2D visited matrix

    // to keep track of visited cell
 

    // Initially all elements are

    // unvisited.

    bool[,] visited = new bool[n, m];

    int result = 0;
 

    // Mark visited all lands

    // that are reachable from edge

    for(int i = 0; i < n; ++i) 

    {

      for(int j = 0; j < m; ++j)

      {

        if ((i != 0 && j != 0 && 

             i != n - 1 && j != m - 1) && 

            matrix[i, j] == 1 && 

            visited[i, j] == false) 

        {
 

          // Determine if the island is closed

          bool hasCornerCell = false;
 

          // hasCornerCell will be updated to

          // true while DFS traversal if there

          // is a cell with value '1' on the corner 

          dfs(matrix, visited, i, j, n, m,

              hasCornerCell);
 

          // If the island is closed

          if (!hasCornerCell)

            result = result + 1;

        }

      }

    }
 

    // Return the final count

    return result;

  }
 

  // Driver code

  static void Main() 

  {

     

    // Given size of Matrix

    int N = 5, M = 8;

  

    // Given Matrix

    int[,] matrix ={{ 1, 0, 1, 0,1},

{0 ,0 ,1 ,0 ,0},

{0, 0, 1 ,1 ,0},

{0 ,1 ,0 ,1 ,0},

{1 ,1 ,1 ,0, 0},

{0 ,0 ,0 ,0 ,1},

{0 ,1 ,0 ,1 ,0},

{0 ,0 ,1 ,1 ,0},

{0 0 0 1 1},

{1 1 0 0 0}};
/*{ { 0, 0, 0, 0, 0, 0, 0, 1 },

                       { 0, 1, 1, 1, 1, 0, 0, 1 },

                       { 0, 1, 0, 1, 0, 0, 0, 1 },

                       { 0, 1, 1, 1, 1, 0, 1, 0 },

                       { 0, 0, 0, 0, 0, 0, 0, 1 } };

  */

    // Function Call

    Console.WriteLine(countClosedIsland(matrix, N, M));

  }
}
 
// This
