OPTIMIZING BOX WEIGHT | GIFT 


ROBLEM 1 : If we sort the array, the subset A with maximal total weight is the shortest trailing subarray with sum greater than half of the total sum, e.g. for the example above,

sorted(arr) = [1, 2, 2, 3, 4, 5]
sum(arr) / 2 = 17 / 2 = 8.5
A = [4, 5]
sum(A) = 9

split array in two parts, constraints: A sum >= B sum
num of elements A <= B
A & B should be distinct.
return expected A

Approach :
1. calculate sum of total elements
2. target = sum/2
3. take MaxQueue PriorityQueue
4. while(localsum < target) add elements to result and localsum
5. return result in reverse
this solution passed all test cases except 1

PROBLEM 2 : GIFTING GROUPS
Amazon is working on grouping people in audible groups. You are given a list of integers which are pictorially repesented as 2D matrix
col 0 col1 col2
row 0 1 1 0
row 1 1 1 0
row 2 0 0 1

submitted the first best answer in the solutions, it passed all test cases
Solution:

using System;
using System.Collections.Generic;
class Program
{
    public static List<int> minimalHeaviestSetA(List<int> arr) {
// Write your code here
 arr.Sort();
int sum =0;
foreach(int i in arr){
sum+=(int)i;
}
int s=0;
List<int> res = new List<int>();
for(int i=arr.Count-1;i>=1;i--){
s+=arr[i];
res.Add(arr[i]);

     if(sum-s < s){
         break;
     }

 if(res != null)
 res.Sort();
}
 return res;

}
    static void Main() {
        int x = 10;
        int y = 25;
        int z = x + y;

        Console.Write("Sum of x + y = "+ z);
    }
}

-----gifting
public static int GroupGifts(string[] arr)
        {
            int[,] matrix = new int[arr.Length, arr.Length];
            for (int i = 0; i < arr.Length; i++)
            {
                for (int j = 0; j < arr.Length; j++)
                {
                    var s = arr[i];
                    var content = s[j] - '0';
                    matrix[i, j] = content;
                }
            }

            bool[] reached = new bool[arr.Length];
            int count = 0;
            for (int i = 0; i < arr.Length; i++)
            {
                if (reached[i])
                {
                    continue;
                }

                FindFriends(matrix, reached, i, arr.Length);

                count++;
            }

            return count;
        }

private static void FindFriends(int[,] matrix, bool[] reached, int i, int arrLenght)
        {
            reached[i] = true;
            for (int j = 0; j < arrLenght; j++)
            {
                if (matrix[i, j] == 1 && !reached[j])
                {
                    FindFriends(matrix, reached, j, arrLenght);
                }
            }
        }
